import React, { createContext, useContext, useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const navigate = useNavigate();
  const [accessToken, setAccessToken] = useState(localStorage.getItem('accessToken') || null);
  const [refreshToken, setRefreshToken] = useState(localStorage.getItem('refreshToken') || null);
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [refreshLoading, setRefreshLoading] = useState(false);
  const [failedQueue, setFailedQueue] = useState([]);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–µ–±–∞–≥-—Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const [debugAdminMode, setDebugAdminMode] = useState(
    localStorage.getItem('debugAdminMode') === 'true' || false
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –µ—Å—Ç—å, –Ω–æ –æ–Ω–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏), –æ—á–∏—Å—Ç–∏–º –∏—Ö
    if (accessToken === '' || refreshToken === '') {
      setAccessToken(null);
      setRefreshToken(null);
      localStorage.removeItem('accessToken');
      localStorage.removeItem('refreshToken');
    }
  }, []);

  const processQueue = (error, token = null) => {
    failedQueue.forEach(prom => {
      if (error) {
        prom.reject(error);
      } else {
        prom.resolve(token);
      }
    });
    setFailedQueue([]);
  };

  const setTokens = (newAccessToken, newRefreshToken) => {
    setAccessToken(newAccessToken);
    setRefreshToken(newRefreshToken);
    if (newAccessToken) {
      localStorage.setItem('accessToken', newAccessToken);
    } else {
      localStorage.removeItem('accessToken');
    }
    if (newRefreshToken) {
      localStorage.setItem('refreshToken', newRefreshToken);
    } else {
      localStorage.removeItem('refreshToken');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const toggleDebugAdminMode = () => {
    const newMode = !debugAdminMode;
    setDebugAdminMode(newMode);
    localStorage.setItem('debugAdminMode', newMode);
    
    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ç–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –µ–≥–æ —Ä–æ–ª–∏
    if (user) {
      setUser(prevUser => {
        const userCopy = { ...prevUser };
        
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (newMode) {
          // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å ADMIN, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
          if (!userCopy.roles.includes('ADMIN')) {
            userCopy.roles = [...userCopy.roles, 'ADMIN'];
          }
          
          // –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          console.log('üîì –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω. –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userCopy.roles);
          alert('–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Ç–µ—Ä–º–∏–Ω—ã.');
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
          setTimeout(fetchUserData, 500);
        } else {
          // –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∞–µ–º –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ —Ä–µ–∞–ª—å–Ω–∞—è —Ä–æ–ª—å ADMIN, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          // –ò–Ω–∞—á–µ, —É–¥–∞–ª—è–µ–º —Ä–æ–ª—å ADMIN, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
          const originalRoles = JSON.parse(localStorage.getItem('originalUserRoles') || '[]');
          if (!originalRoles.includes('ADMIN')) {
            userCopy.roles = userCopy.roles.filter(role => role !== 'ADMIN');
          }
          
          // –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          console.log('üîí –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω. –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userCopy.roles);
          alert('–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω.');
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
          setTimeout(fetchUserData, 500);
        }
        
        return userCopy;
      });
    }
  };

  const apiClient = axios.create({
    baseURL: '/api/v1',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  apiClient.interceptors.request.use(
    config => {
      // –ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
      if (debugAdminMode) {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Debug-Admin-Mode: true');
        config.headers['X-Debug-Admin-Mode'] = 'true';
      }
    
      if (accessToken) {
        config.headers.Authorization = `Bearer ${accessToken}`;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL –Ω–∞ —Å–ª—É—á–∞–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è /api/v1
      if (config.url && config.url.startsWith('/api/v1')) {
        console.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ /api/v1 –≤ URL –∑–∞–ø—Ä–æ—Å–∞:', config.url);
        config.url = config.url.replace('/api/v1', '');
      }
      
      return config;
    },
    error => Promise.reject(error)
  );

  apiClient.interceptors.response.use(
    response => response,
    async error => {
      const originalRequest = error.config;
      if (error.response?.status === 401 && refreshToken && !originalRequest._retry) {
        originalRequest._retry = true;
        try {
          setRefreshLoading(true);
          // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
          const refreshClient = axios.create({
            baseURL: '/api/v1',
            headers: {
              'Content-Type': 'application/json',
            },
          });
          
          const response = await refreshClient.post('/auth/refresh', {
            refresh_token: refreshToken,
          });

          const { access_token, refresh_token } = response.data;
          
          setTokens(access_token, refresh_token);
          originalRequest.headers.Authorization = `Bearer ${access_token}`;
          processQueue(null, access_token);
          setRefreshLoading(false);
          return apiClient(originalRequest);
        } catch (refreshError) {
          processQueue(refreshError, null);
          logout();
          return Promise.reject(refreshError);
        } finally {
          setRefreshLoading(false);
        }
      }
      return Promise.reject(error);
    }
  );

  const fetchUserData = async () => {
    if (!accessToken) {
      setLoading(false);
      return;
    }
    
    try {
      const response = await apiClient.get('/users/me');
      const userData = response.data;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
      localStorage.setItem('originalUserRoles', JSON.stringify(userData.roles || []));
      
      // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å ADMIN
      if (debugAdminMode && !userData.roles.includes('ADMIN')) {
        userData.roles = [...userData.roles, 'ADMIN'];
      }
      
      setUser(userData);
    } catch (error) {
      console.error('Error fetching user data:', error);
      if (error.response?.status === 401) {
        logout();
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUserData();
  }, [accessToken]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  useEffect(() => {
    // –ï—Å–ª–∏ –Ω–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–ª—è—Ç—å
    if (!refreshToken) return;

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    const refreshAccessToken = async () => {
      try {
        setRefreshLoading(true);
        const refreshClient = axios.create({
          baseURL: '/api/v1',
          headers: {
            'Content-Type': 'application/json',
          },
        });
        
        const response = await refreshClient.post('/auth/refresh', {
          refresh_token: refreshToken,
        });

        const { access_token, refresh_token } = response.data;
        
        if (access_token && refresh_token) {
          setTokens(access_token, refresh_token);
          console.log('–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        if (error.response?.status === 401) {
          logout();
        }
      } finally {
        setRefreshLoading(false);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    refreshAccessToken();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    const intervalId = setInterval(refreshAccessToken, 15 * 60 * 1000);

    // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => clearInterval(intervalId);
  }, [refreshToken]);

  const login = async (email, password) => {
    setLoading(true);
    try {
      const response = await apiClient.post('/auth/login', {
        email,
        password,
      });
      
      const { access_token, refresh_token } = response.data;
      
      if (!access_token || !refresh_token) {
        throw new Error('–¢–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
      }
      
      setTokens(access_token, refresh_token);
      await fetchUserData();
      
      return response.data;
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const register = async (userData) => {
    const response = await apiClient.post('/auth/register', userData);
    login(userData.email, userData.password);
    return response.data;
  };

  const logout = () => {
    setAccessToken(null);
    setRefreshToken(null);
    setUser(null);
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('originalUserRoles');
    setFailedQueue([]);
    navigate('/login');
  };

  const value = {
    accessToken,
    refreshToken,
    user,
    loading,
    refreshLoading,
    apiClient,
    login,
    register,
    logout,
    fetchUserData,
    debugAdminMode,
    toggleDebugAdminMode
  };

  return (
    <AuthContext.Provider value={value}>
      {refreshLoading && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          height: '3px',
          background: 'var(--color-accent)',
          zIndex: 9999,
          animation: 'loading 1.5s infinite'
        }} />
      )}
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  return useContext(AuthContext);
};

const style = document.createElement('style');
style.textContent = `
  @keyframes loading {
    0% { width: 0; }
    50% { width: 50%; }
    100% { width: 100%; }
  }
`;
document.head.appendChild(style);   